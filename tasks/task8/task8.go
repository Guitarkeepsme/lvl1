// Дана переменная int64. Разработать программу, которая устанавливает i-й бит в 1 или 0.

package main

import (
	"fmt"
	"strconv"
)

// Функция принимает исходное число и позицию нужного нам бита
func setBit(n int64, pos uint) int64 {

	// Создаём маску: число с таким набором битов,
	// что при выполнении соответствующей побитовой операции
	// изменится только нужный бит, а остальные останутся неизменными.
	// Для этого мы сдвигаем единиц влево по индексу бита

	mask := int64(1) << pos

	// Теперь проводим "исключающее или" ("ксор"):
	n ^= mask

	// Возвращаем результат
	return n
}

func main() {
	var num int64
	var i int

	fmt.Print("Введите число: ")
	_, err := fmt.Scanln(&num)
	if err != nil {
		panic("Вы ввели некорректные данные!")
	}

	fmt.Printf("Это число в двоичном представлении выглядит как %s\n", strconv.FormatInt(num, 2))
	fmt.Print("Теперь введите индекс нужного бита: ")

	_, err = fmt.Scanln(&i)
	if err != nil {
		panic("Вы ввели некорректные данные!")
	}

	res := setBit(num, uint(i))
	fmt.Printf("Результат: %d\n(в двоичной системе %s)\n", res, strconv.FormatInt(res, 2))
}
