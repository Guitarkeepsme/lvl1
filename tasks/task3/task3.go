// Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов с использованием конкурентных вычислений.

package main

import (
	"fmt"
	"sync"
)

// Определение функции возведения в квадрат: функция принимает число,
// а также WaitGroup для синхронизации горутин и канал для передачи данных между ними

func square(num int, wg *sync.WaitGroup, c chan int) {
	defer wg.Done()
	c <- num * num
}

func main() {
	nums := []int{2, 4, 6, 8, 10} // Массив с исходными числами
	c := make(chan int)           // Создание канала

	wg := sync.WaitGroup{} // Определение WaitGroup для синхронизации

	// Проход по всем числам и создание горутины для каждого вычисления
	for _, num := range nums {
		wg.Add(1)
		go square(num, &wg, c)
	}
	// После того, как горутина передала результат вычисления в канал, она ждёт остальных
	go func() {
		wg.Wait()
		close(c) // Канал после передачи данных закрывается
	}()

	// Результаты возведения в квадрат, полученные из канала, складываются
	sum := 0
	for squaredNum := range c {
		sum += squaredNum
	}

	fmt.Println("Сумма квадратов равна", sum)
}
